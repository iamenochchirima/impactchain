type email = text;
type WorkplaceGenderEqualityPoliciesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfPolicies: nat;
   objectives: text;
   plannedInitiatives: text;
   policyName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfPolicy: text;
 };
type WomensEmpowermentProgramData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfParticipants: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfProgram: text;
 };
type WaterSanitationAccessData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalFundsAllocated: nat;
 };
type WaterConservationInitiativesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalFunding: nat;
   typeOfInitiative: text;
   waterSaved: nat;
 };
type WasteReductionRecyclingData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   recyclingProcessInvolved: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalWasteReduced: nat;
 };
type VocationalTrainingProgramsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalParticipants: nat;
   typeOfTraining: text;
 };
type UserRecord = 
 record {
   aboutCompany:
    record {
      companySize: text;
      industry: text;
      logo: text;
      name: text;
    };
   created: int;
   email: text;
   impactTargets: ImpactTargets;
 };
type UrbanSustainabilityProjectsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfProject: text;
 };
type UrbanLivingConditionsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfAreasImproved: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type Testimonials = 
 record {
   description: text;
   image: text;
 };
type SustainableSupplyChainInvestmentData = 
 record {
   amountInvested: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfsupplyChainImproved: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfInvestment: text;
 };
type SustainableInfrastructureData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfInfrastructure: text;
 };
type SustainableFishingSupportData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfSustainableFishingProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfSupport: text;
 };
type SustainableAgricultureInvestment = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   projectName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalInvestment: nat;
   typeOfInvestment: text;
 };
type StudentsBenefitingData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   educationalLevel: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalStudentsBenefited: nat;
   typeOfBenefits: text;
 };
type SchoolsSupportedData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfSchoolsSupported: nat;
   objectives: text;
   plannedInitiatives: text;
   projectName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfSupport: text;
 };
type SanitationFacilitiesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   facilityDescription: text;
   facilityName: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalInvestment: nat;
   typeOfFacility: text;
 };
type STEMInnovationEducationData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalParticipants: nat;
   typeOfProgram: text;
 };
type SDGAdvocacyCampaignsData = 
 record {
   created: int;
   dataVerification: bool;
   duration: text;
   numberOfCampaigns: nat;
   programName: text;
   scopeOfCampaign: text;
   startDate: int;
   supportingFiles: vec text;
   typeOfCampaign: text;
 };
type Result = 
 variant {
   err: text;
   ok: UserRecord;
 };
type RenewableEnergyProjectsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfRenewableEnergy: text;
 };
type RenewableEnergyInvestmentData = 
 record {
   amountInvested: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfRenewableEnergyInvestemt: text;
 };
type ReforestationProjectsData = 
 record {
   areaOfLandReforested: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   projectName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type PeopleBenefitingFromInfrastructureData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalBeneficiaries: nat;
   typeOfInfrastructure: text;
 };
type PeopleAssistedOutOfPoverty = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfPeopleAssisted: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type OrganizationalResourceFootprintReductionData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   reductionInResourceFootprint: float64;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfResource: text;
 };
type OceanPollutionReductionData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   reductionInPollution: float64;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typesOfPollutantsTargeted: text;
 };
type NutritiousFoodProgram = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type MicroloanProgram = 
 record {
   amountDisbursed: nat64;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfLoans: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfSupport: text;
 };
type Metrics9 = 
 record {
   Metric91: opt Metric91;
   Metric92: opt Metric92;
   Metric93: opt Metric93;
 };
type Metrics8 = 
 record {
   Metric81: opt Metric81;
   Metric82: opt Metric82;
   Metric83: opt Metric83;
 };
type Metrics7 = 
 record {
   Metric71: opt Metric71;
   Metric72: opt Metric72;
   Metric73: opt Metric73;
 };
type Metrics6 = 
 record {
   Metric61: opt Metric61;
   Metric62: opt Metric62;
   Metric63: opt Metric63;
 };
type Metrics5 = 
 record {
   Metric51: opt Metric51;
   Metric52: opt Metric52;
   Metric53: opt Metric53;
 };
type Metrics4 = 
 record {
   Metric41: opt Metric41;
   Metric42: opt Metric42;
   Metric43: opt Metric43;
 };
type Metrics3 = 
 record {
   Metric31: opt Metric31;
   Metric32: opt Metric32;
   Metric33: opt Metric33;
 };
type Metrics2 = 
 record {
   Metric21: opt Metric21;
   Metric22: opt Metric22;
   Metric23: opt Metric23;
 };
type Metrics17 = 
 record {
   Metric171: opt Metric171;
   Metric172: opt Metric172;
   Metric173: opt Metric173;
 };
type Metrics16 = 
 record {
   Metric161: opt Metric161;
   Metric162: opt Metric162;
   Metric163: opt Metric163;
 };
type Metrics14 = 
 record {
   Metric141: opt Metric141;
   Metric142: opt Metric142;
   Metric143: opt Metric143;
 };
type Metrics13 = 
 record {
   Metric131: opt Metric131;
   Metric132: opt Metric132;
   Metric133: opt Metric133;
 };
type Metrics12 = 
 record {
   Metric121: opt Metric121;
   Metric122: opt Metric122;
   Metric123: opt Metric123;
 };
type Metrics11 = 
 record {
   Metric111: opt Metric111;
   Metric112: opt Metric112;
   Metric113: opt Metric113;
 };
type Metrics10 = 
 record {
   Metric101: opt Metric101;
   Metric102: opt Metric102;
   Metric103: opt Metric103;
 };
type Metrics1 = 
 record {
   Metric11: opt Metric11;
   Metric12: opt Metric12;
   Metric13: opt Metric13;
 };
type Metric93 = 
 record {
   data: vec PeopleBenefitingFromInfrastructureData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric92 = 
 record {
   data: vec SustainableInfrastructureData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric91 = 
 record {
   data: vec STEMInnovationEducationData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric83 = 
 record {
   data: vec EmploymentConditionsImprovementData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric82 = 
 record {
   data: vec VocationalTrainingProgramsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric81 = 
 record {
   data: vec JobCreationInitiativesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric73 = 
 record {
   data: vec EnergyConsumptionReductionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric72 = 
 record {
   data: vec EnergyEfficientSystemsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric71 = 
 record {
   data: vec RenewableEnergyProjectsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric63 = 
 record {
   data: vec WaterSanitationAccessData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric62 = 
 record {
   data: vec WaterConservationInitiativesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric61 = 
 record {
   data: vec SanitationFacilitiesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric53 = 
 record {
   data: vec WorkplaceGenderEqualityPoliciesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric52 = 
 record {
   data: vec GenderEqualityWorkshopsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric51 = 
 record {
   data: vec WomensEmpowermentProgramData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric43 = 
 record {
   data: vec StudentsBenefitingData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric42 = 
 record {
   data: vec EducationalGrantsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric41 = 
 record {
   data: vec SchoolsSupportedData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric33 = 
 record {
   data: vec HealthcareAccessData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric32 = 
 record {
   data: vec HealthServicesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric31 = 
 record {
   data: vec HealthcareFunding;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric23 = 
 record {
   data: vec NutritiousFoodProgram;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric22 = 
 record {
   data: vec SustainableAgricultureInvestment;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric21 = 
 record {
   data: vec FoodDonation;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric173 = 
 record {
   data: vec SDGAdvocacyCampaignsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric172 = 
 record {
   data: vec GlobalPartnershipFinancialContributionsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric171 = 
 record {
   data: vec CollaborativeSDGProjectsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric163 = 
 record {
   data: vec CommunityPeaceProgramsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric162 = 
 record {
   data: vec HumanRightsInitiativesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric161 = 
 record {
   data: vec AntiCorruptionProgramsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric153 = 
 record {
   data: vec LandRehabilitationData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric152 = 
 record {
   data: vec EndangeredSpeciesProtectionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric151 = 
 record {
   data: vec LandConservationReforestationData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric143 = 
 record {
   data: vec SustainableFishingSupportData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric142 = 
 record {
   data: vec OceanPollutionReductionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric141 = 
 record {
   data: vec MarineEcosystemProtectionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric133 = 
 record {
   data: vec ReforestationProjectsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric132 = 
 record {
   data: vec RenewableEnergyInvestmentData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric131 = 
 record {
   data: vec CarbonEmissionReductionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric13 = 
 record {
   data: vec PeopleAssistedOutOfPoverty;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric123 = 
 record {
   data: vec OrganizationalResourceFootprintReductionData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric122 = 
 record {
   data: vec SustainableSupplyChainInvestmentData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric121 = 
 record {
   data: vec WasteReductionRecyclingData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric12 = 
 record {
   data: vec MicroloanProgram;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric113 = 
 record {
   data: vec UrbanLivingConditionsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric112 = 
 record {
   data: vec AffordableHousingSupportData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric111 = 
 record {
   data: vec UrbanSustainabilityProjectsData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric11 = 
 record {
   data: vec JobTrainingProgram;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric103 = 
 record {
   data: vec InequalityReductionBeneficiariesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric102 = 
 record {
   data: vec InclusionPoliciesData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Metric101 = 
 record {
   data: vec MarginalizedCommunitySupportData;
   documents: vec text;
   goal: opt text;
   iotDevice: opt IOTDevice;
   key: text;
   name: text;
 };
type Matrics15 = 
 record {
   Metric151: opt Metric151;
   Metric152: opt Metric152;
   Metric153: opt Metric153;
 };
type MarineEcosystemProtectionData = 
 record {
   areaOfEcosystemProtected: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfEcosystem: text;
 };
type MarginalizedCommunitySupportData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   targetCommunity: text;
   testimonials: vec Testimonials;
   totalFunding: nat;
   typeOfSupport: text;
 };
type LandRehabilitationData = 
 record {
   areaOfLandRehabilitated: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type LandConservationReforestationData = 
 record {
   areaOfLandConserved: nat;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfLandConservation: text;
   typeOfLandUse: text;
 };
type JobTrainingProgram = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type JobCreationInitiativesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   jobsCreated: nat;
   jobsSectors: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type InequalityReductionBeneficiariesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalBeneficiaries: nat;
   typeOfInequalityAddressed: text;
 };
type InclusionPoliciesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfPolicies: nat;
   objectives: text;
   plannedInitiatives: text;
   policyName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfPolicy: text;
 };
type ImpactTargets = 
 record {
   ImpactTarget1: opt ImpactTarget1;
   ImpactTarget10: opt ImpactTarget10;
   ImpactTarget11: opt ImpactTarget11;
   ImpactTarget12: opt ImpactTarget12;
   ImpactTarget13: opt ImpactTarget13;
   ImpactTarget14: opt ImpactTarget14;
   ImpactTarget15: opt ImpactTarget15;
   ImpactTarget16: opt ImpactTarget16;
   ImpactTarget17: opt ImpactTarget17;
   ImpactTarget2: opt ImpactTarget2;
   ImpactTarget3: opt ImpactTarget3;
   ImpactTarget4: opt ImpactTarget4;
   ImpactTarget5: opt ImpactTarget5;
   ImpactTarget6: opt ImpactTarget6;
   ImpactTarget7: opt ImpactTarget7;
   ImpactTarget8: opt ImpactTarget8;
   ImpactTarget9: opt ImpactTarget9;
 };
type ImpactTarget9 = 
 record {
   id: nat;
   metrics: Metrics9;
   name: text;
 };
type ImpactTarget8 = 
 record {
   id: nat;
   metrics: Metrics8;
   name: text;
 };
type ImpactTarget7 = 
 record {
   id: nat;
   metrics: Metrics7;
   name: text;
 };
type ImpactTarget6 = 
 record {
   id: nat;
   metrics: Metrics6;
   name: text;
 };
type ImpactTarget5 = 
 record {
   id: nat;
   metrics: Metrics5;
   name: text;
 };
type ImpactTarget4 = 
 record {
   id: nat;
   metrics: Metrics4;
   name: text;
 };
type ImpactTarget3 = 
 record {
   id: nat;
   metrics: Metrics3;
   name: text;
 };
type ImpactTarget2 = 
 record {
   id: nat;
   metrics: Metrics2;
   name: text;
 };
type ImpactTarget17 = 
 record {
   id: nat;
   metrics: Metrics17;
   name: text;
 };
type ImpactTarget16 = 
 record {
   id: nat;
   metrics: Metrics16;
   name: text;
 };
type ImpactTarget15 = 
 record {
   id: nat;
   metrics: Matrics15;
   name: text;
 };
type ImpactTarget14 = 
 record {
   id: nat;
   metrics: Metrics14;
   name: text;
 };
type ImpactTarget13 = 
 record {
   id: nat;
   metrics: Metrics13;
   name: text;
 };
type ImpactTarget12 = 
 record {
   id: nat;
   metrics: Metrics12;
   name: text;
 };
type ImpactTarget11 = 
 record {
   id: nat;
   metrics: Metrics11;
   name: text;
 };
type ImpactTarget10 = 
 record {
   id: nat;
   metrics: Metrics10;
   name: text;
 };
type ImpactTarget1 = 
 record {
   id: nat;
   metrics: Metrics1;
   name: text;
 };
type IOTDevice = 
 record {
   ipAddress: text;
   name: text;
   platform: text;
 };
type HumanRightsInitiativesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfInitiatives: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   scopeOfHumanRightsActivities: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfInitiative: text;
 };
type HealthcareFunding = 
 record {
   amountFunded: nat64;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfFunding: text;
 };
type HealthcareAccessData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type HealthServicesData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalParticipants: nat;
   typeOfService: text;
 };
type GlobalPartnershipFinancialContributionsData = 
 record {
   amountContributed: nat64;
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   sourceOfFunds: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfContribution: text;
 };
type GenderEqualityWorkshopsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfParticipants: nat;
   objectives: text;
   plannedInitiatives: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfWorkshop: text;
   workshopDescription: text;
   workshopName: text;
 };
type FoodDonation = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfFoodDonated: text;
   volumeOfDonatedFood: nat;
 };
type EnergyEfficientSystemsData = 
 record {
   created: int;
   dataVerification: bool;
   efficiencyRate: nat;
   location: text;
   numberOfSystemsInstalled: nat;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   typeOfSystem: text;
 };
type EnergyConsumptionReductionData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   measurementsUnitsUsed: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   reductionInEnergyConsumption: nat;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
 };
type EndangeredSpeciesProtectionData = 
 record {
   challenges: text;
   communityImpact: text;
   conservationMeasures: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberofSpeciesProtected: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfSpecies: text;
 };
type EmploymentConditionsImprovementData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfBeneficiaries: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfImprovement: text;
 };
type EducationalGrantsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalAmountAwarded: nat64;
   typeOfGrant: text;
 };
type CommunityPeaceProgramsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfProgram: text;
 };
type CollaborativeSDGProjectsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfProjects: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfCollaboration: text;
 };
type CarbonEmissionReductionData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   reductionInEmission: float64;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfEmissionReduced: text;
 };
type AntiCorruptionProgramsData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   natureOfAntiCorruptionMeasures: text;
   notableAchievements: text;
   numberOfPrograms: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   typeOfProgram: text;
 };
type AffordableHousingSupportData = 
 record {
   challenges: text;
   communityImpact: text;
   created: int;
   dataVerification: bool;
   description: text;
   duration: text;
   futureObjectives: text;
   location: text;
   notableAchievements: text;
   numberOfHousingUnitsSupported: nat;
   objectives: text;
   plannedInitiatives: text;
   programName: text;
   startDate: int;
   supportingFiles: vec text;
   testimonials: vec Testimonials;
   totalFunding: nat;
 };
service : {
  addUserRecord: (UserRecord) -> ();
  getUserRecord: (email) -> (Result) query;
  removeUserRecord: (email) -> ();
  updateUserRecord: (UserRecord) -> ();
}
